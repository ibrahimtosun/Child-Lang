//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/grammar/lang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class langParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMAND_WRITE=1, COMMAND_READ=2, COMMAND_FUNC=3, COMMAND_CALL=4, COMMAND_IF=5, 
		COMMAND_ELSE=6, COMMAND_WHILE=7, BOOL_OP=8, BOOL_EQ=9, BOOL_GT=10, BOOL_LS=11, 
		BOOL_STR=12, BOOL_TRUE=13, BOOL_FALSE=14, MUL=15, DIV=16, ADD=17, SUB=18, 
		VARIABLE=19, STRING=20, COMMENT=21, TEXT=22, QUOTE=23, NUMBER=24, EOL=25, 
		WS=26;
	public const int
		RULE_lang = 0, RULE_block = 1, RULE_command = 2, RULE_command_print = 3, 
		RULE_command_read = 4, RULE_command_assign = 5, RULE_command_block_func = 6, 
		RULE_command_call = 7, RULE_command_block_if = 8, RULE_command_block_else = 9, 
		RULE_command_block_while = 10, RULE_command_arg = 11, RULE_assign_arg = 12, 
		RULE_bool_arg = 13, RULE_math_arg = 14;
	public static readonly string[] ruleNames = {
		"lang", "block", "command", "command_print", "command_read", "command_assign", 
		"command_block_func", "command_call", "command_block_if", "command_block_else", 
		"command_block_while", "command_arg", "assign_arg", "bool_arg", "math_arg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'read'", "'func'", "'call'", "'if'", "'else'", "'while'", 
		null, "'equals'", "'grater'", "'lesser'", null, "'true'", "'false'", "'times'", 
		"'divide'", "'plus'", "'minus'", null, null, null, null, "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMAND_WRITE", "COMMAND_READ", "COMMAND_FUNC", "COMMAND_CALL", 
		"COMMAND_IF", "COMMAND_ELSE", "COMMAND_WHILE", "BOOL_OP", "BOOL_EQ", "BOOL_GT", 
		"BOOL_LS", "BOOL_STR", "BOOL_TRUE", "BOOL_FALSE", "MUL", "DIV", "ADD", 
		"SUB", "VARIABLE", "STRING", "COMMENT", "TEXT", "QUOTE", "NUMBER", "EOL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static langParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public langParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public langParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class LangContext : ParserRuleContext {
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public LangContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lang; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLang(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LangContext lang() {
		LangContext _localctx = new LangContext(Context, State);
		EnterRule(_localctx, 0, RULE_lang);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30; block();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMAND_WRITE) | (1L << COMMAND_READ) | (1L << COMMAND_FUNC) | (1L << COMMAND_CALL) | (1L << COMMAND_IF) | (1L << COMMAND_WHILE) | (1L << VARIABLE) | (1L << COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public Command_block_funcContext command_block_func() {
			return GetRuleContext<Command_block_funcContext>(0);
		}
		public Command_block_ifContext command_block_if() {
			return GetRuleContext<Command_block_ifContext>(0);
		}
		public Command_block_whileContext command_block_while() {
			return GetRuleContext<Command_block_whileContext>(0);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(langParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(langParser.EOL, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMAND_FUNC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; command_block_func();
				}
				break;
			case COMMAND_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; command_block_if();
				}
				break;
			case COMMAND_WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37; command_block_while();
				}
				break;
			case COMMAND_WRITE:
			case COMMAND_READ:
			case COMMAND_CALL:
			case VARIABLE:
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 38; command();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 41;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 43; Match(EOL);
					}
					break;
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EOL) {
					{
					State = 46; Match(EOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(langParser.COMMENT, 0); }
		public Command_callContext command_call() {
			return GetRuleContext<Command_callContext>(0);
		}
		public Command_printContext command_print() {
			return GetRuleContext<Command_printContext>(0);
		}
		public Command_readContext command_read() {
			return GetRuleContext<Command_readContext>(0);
		}
		public Command_assignContext command_assign() {
			return GetRuleContext<Command_assignContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(langParser.EOL, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				{
				State = 51; Match(COMMENT);
				}
				break;
			case COMMAND_CALL:
				{
				State = 52; command_call();
				}
				break;
			case COMMAND_WRITE:
				{
				State = 53; command_print();
				}
				break;
			case COMMAND_READ:
				{
				State = 54; command_read();
				}
				break;
			case VARIABLE:
				{
				State = 55; command_assign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 58; Match(EOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_printContext : ParserRuleContext {
		public ITerminalNode COMMAND_WRITE() { return GetToken(langParser.COMMAND_WRITE, 0); }
		public Command_argContext[] command_arg() {
			return GetRuleContexts<Command_argContext>();
		}
		public Command_argContext command_arg(int i) {
			return GetRuleContext<Command_argContext>(i);
		}
		public Math_argContext[] math_arg() {
			return GetRuleContexts<Math_argContext>();
		}
		public Math_argContext math_arg(int i) {
			return GetRuleContext<Math_argContext>(i);
		}
		public Bool_argContext[] bool_arg() {
			return GetRuleContexts<Bool_argContext>();
		}
		public Bool_argContext bool_arg(int i) {
			return GetRuleContext<Bool_argContext>(i);
		}
		public Command_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_printContext command_print() {
		Command_printContext _localctx = new Command_printContext(Context, State);
		EnterRule(_localctx, 6, RULE_command_print);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(COMMAND_WRITE);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 65;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 62; command_arg();
						}
						break;
					case 2:
						{
						State = 63; math_arg(0);
						}
						break;
					case 3:
						{
						State = 64; bool_arg(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_readContext : ParserRuleContext {
		public ITerminalNode COMMAND_READ() { return GetToken(langParser.COMMAND_READ, 0); }
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public Command_readContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_read; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_read(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_readContext command_read() {
		Command_readContext _localctx = new Command_readContext(Context, State);
		EnterRule(_localctx, 8, RULE_command_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(COMMAND_READ);
			State = 70; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_assignContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public Assign_argContext assign_arg() {
			return GetRuleContext<Assign_argContext>(0);
		}
		public Command_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_assign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_assignContext command_assign() {
		Command_assignContext _localctx = new Command_assignContext(Context, State);
		EnterRule(_localctx, 10, RULE_command_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(VARIABLE);
			State = 73; assign_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_block_funcContext : ParserRuleContext {
		public ITerminalNode COMMAND_FUNC() { return GetToken(langParser.COMMAND_FUNC, 0); }
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Command_block_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_block_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_block_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_block_funcContext command_block_func() {
		Command_block_funcContext _localctx = new Command_block_funcContext(Context, State);
		EnterRule(_localctx, 12, RULE_command_block_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(COMMAND_FUNC);
			State = 76; Match(VARIABLE);
			State = 77; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_callContext : ParserRuleContext {
		public ITerminalNode COMMAND_CALL() { return GetToken(langParser.COMMAND_CALL, 0); }
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public Command_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_callContext command_call() {
		Command_callContext _localctx = new Command_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_command_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(COMMAND_CALL);
			State = 80; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_block_ifContext : ParserRuleContext {
		public ITerminalNode COMMAND_IF() { return GetToken(langParser.COMMAND_IF, 0); }
		public Bool_argContext bool_arg() {
			return GetRuleContext<Bool_argContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(langParser.EOL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Command_block_elseContext command_block_else() {
			return GetRuleContext<Command_block_elseContext>(0);
		}
		public Command_block_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_block_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_block_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_block_ifContext command_block_if() {
		Command_block_ifContext _localctx = new Command_block_ifContext(Context, State);
		EnterRule(_localctx, 16, RULE_command_block_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(COMMAND_IF);
			State = 83; bool_arg(0);
			State = 84; Match(EOL);
			State = 85; block();
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 86; command_block_else();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_block_elseContext : ParserRuleContext {
		public ITerminalNode COMMAND_ELSE() { return GetToken(langParser.COMMAND_ELSE, 0); }
		public ITerminalNode EOL() { return GetToken(langParser.EOL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Command_block_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_block_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_block_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_block_elseContext command_block_else() {
		Command_block_elseContext _localctx = new Command_block_elseContext(Context, State);
		EnterRule(_localctx, 18, RULE_command_block_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(COMMAND_ELSE);
			State = 90; Match(EOL);
			State = 91; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_block_whileContext : ParserRuleContext {
		public ITerminalNode COMMAND_WHILE() { return GetToken(langParser.COMMAND_WHILE, 0); }
		public Bool_argContext bool_arg() {
			return GetRuleContext<Bool_argContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(langParser.EOL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Command_block_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_block_while; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_block_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_block_whileContext command_block_while() {
		Command_block_whileContext _localctx = new Command_block_whileContext(Context, State);
		EnterRule(_localctx, 20, RULE_command_block_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(COMMAND_WHILE);
			State = 94; bool_arg(0);
			State = 95; Match(EOL);
			State = 96; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_argContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public ITerminalNode STRING() { return GetToken(langParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(langParser.NUMBER, 0); }
		public Command_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_argContext command_arg() {
		Command_argContext _localctx = new Command_argContext(Context, State);
		EnterRule(_localctx, 22, RULE_command_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VARIABLE) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_argContext : ParserRuleContext {
		public Command_argContext command_arg() {
			return GetRuleContext<Command_argContext>(0);
		}
		public Math_argContext math_arg() {
			return GetRuleContext<Math_argContext>(0);
		}
		public Bool_argContext bool_arg() {
			return GetRuleContext<Bool_argContext>(0);
		}
		public Assign_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_argContext assign_arg() {
		Assign_argContext _localctx = new Assign_argContext(Context, State);
		EnterRule(_localctx, 24, RULE_assign_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 100; command_arg();
				}
				break;
			case 2:
				{
				State = 101; math_arg(0);
				}
				break;
			case 3:
				{
				State = 102; bool_arg(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_argContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(langParser.NUMBER, 0); }
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public ITerminalNode BOOL_STR() { return GetToken(langParser.BOOL_STR, 0); }
		public Bool_argContext[] bool_arg() {
			return GetRuleContexts<Bool_argContext>();
		}
		public Bool_argContext bool_arg(int i) {
			return GetRuleContext<Bool_argContext>(i);
		}
		public ITerminalNode BOOL_OP() { return GetToken(langParser.BOOL_OP, 0); }
		public Bool_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_argContext bool_arg() {
		return bool_arg(0);
	}

	private Bool_argContext bool_arg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_argContext _localctx = new Bool_argContext(Context, _parentState);
		Bool_argContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_bool_arg, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 106; Match(NUMBER);
				}
				break;
			case VARIABLE:
				{
				State = 107; Match(VARIABLE);
				}
				break;
			case BOOL_STR:
				{
				State = 108; Match(BOOL_STR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bool_argContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bool_arg);
					State = 111;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 112; Match(BOOL_OP);
					State = 113; bool_arg(5);
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Math_argContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(langParser.VARIABLE, 0); }
		public ITerminalNode NUMBER() { return GetToken(langParser.NUMBER, 0); }
		public Math_argContext[] math_arg() {
			return GetRuleContexts<Math_argContext>();
		}
		public Math_argContext math_arg(int i) {
			return GetRuleContext<Math_argContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(langParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(langParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(langParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(langParser.SUB, 0); }
		public Math_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_arg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlangVisitor<TResult> typedVisitor = visitor as IlangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Math_argContext math_arg() {
		return math_arg(0);
	}

	private Math_argContext math_arg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Math_argContext _localctx = new Math_argContext(Context, _parentState);
		Math_argContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_math_arg, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				{
				State = 120; Match(VARIABLE);
				}
				break;
			case NUMBER:
				{
				State = 121; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 130;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Math_argContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_math_arg);
						State = 124;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 125;
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126; math_arg(5);
						}
						break;
					case 2:
						{
						_localctx = new Math_argContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_math_arg);
						State = 127;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 128;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129; math_arg(4);
						}
						break;
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return bool_arg_sempred((Bool_argContext)_localctx, predIndex);
		case 14: return math_arg_sempred((Math_argContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_arg_sempred(Bool_argContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool math_arg_sempred(Math_argContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\x8A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x6', '\x2', '\"', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '#', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 
		'*', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '+', '\x3', '\x3', '\x5', 
		'\x3', '/', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x32', '\n', '\x3', 
		'\x5', '\x3', '\x34', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '>', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x6', '\x5', '\x44', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', '\x45', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'Z', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'j', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'p', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'u', '\n', 
		'\xF', '\f', '\xF', '\xE', '\xF', 'x', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '}', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x85', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x88', 
		'\v', '\x10', '\x3', '\x10', '\x2', '\x4', '\x1C', '\x1E', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\x5', '\x4', '\x2', '\x15', '\x16', 
		'\x1A', '\x1A', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x13', '\x14', 
		'\x2', '\x92', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', 
		'?', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'J', '\x3', '\x2', '\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'Q', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '[', '\x3', '\x2', '\x2', '\x2', '\x16', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x64', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x1C', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '|', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', 
		'\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x3', '\x3', '\x2', '\x2', '\x2', '%', '\x34', '\x5', 
		'\xE', '\b', '\x2', '&', '\x34', '\x5', '\x12', '\n', '\x2', '\'', '\x34', 
		'\x5', '\x16', '\f', '\x2', '(', '*', '\x5', '\x6', '\x4', '\x2', ')', 
		'(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x3', '\x2', '\x2', '\x2', '-', '/', '\a', '\x1B', '\x2', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\a', '\x1B', 
		'\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '%', '\x3', '\x2', '\x2', '\x2', '\x33', '&', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\'', '\x3', '\x2', '\x2', '\x2', '\x33', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x5', '\x3', '\x2', '\x2', '\x2', '\x35', ';', 
		'\a', '\x17', '\x2', '\x2', '\x36', ';', '\x5', '\x10', '\t', '\x2', '\x37', 
		';', '\x5', '\b', '\x5', '\x2', '\x38', ';', '\x5', '\n', '\x6', '\x2', 
		'\x39', ';', '\x5', '\f', '\a', '\x2', ':', '\x35', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x36', '\x3', '\x2', '\x2', '\x2', ':', '\x37', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', '>', '\a', 
		'\x1B', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '=', '>', 
		'\x3', '\x2', '\x2', '\x2', '>', '\a', '\x3', '\x2', '\x2', '\x2', '?', 
		'\x43', '\a', '\x3', '\x2', '\x2', '@', '\x44', '\x5', '\x18', '\r', '\x2', 
		'\x41', '\x44', '\x5', '\x1E', '\x10', '\x2', '\x42', '\x44', '\x5', '\x1C', 
		'\xF', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x4', '\x2', '\x2', 'H', 
		'I', '\a', '\x15', '\x2', '\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\x15', '\x2', '\x2', 'K', 'L', '\x5', '\x1A', '\xE', 
		'\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x5', '\x2', 
		'\x2', 'N', 'O', '\a', '\x15', '\x2', '\x2', 'O', 'P', '\x5', '\x4', '\x3', 
		'\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x6', 
		'\x2', '\x2', 'R', 'S', '\a', '\x15', '\x2', '\x2', 'S', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '\a', '\x2', '\x2', 'U', 'V', '\x5', 
		'\x1C', '\xF', '\x2', 'V', 'W', '\a', '\x1B', '\x2', '\x2', 'W', 'Y', 
		'\x5', '\x4', '\x3', '\x2', 'X', 'Z', '\x5', '\x14', '\v', '\x2', 'Y', 
		'X', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x13', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\b', '\x2', 
		'\x2', '\\', ']', '\a', '\x1B', '\x2', '\x2', ']', '^', '\x5', '\x4', 
		'\x3', '\x2', '^', '\x15', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		'\t', '\x2', '\x2', '`', '\x61', '\x5', '\x1C', '\xF', '\x2', '\x61', 
		'\x62', '\a', '\x1B', '\x2', '\x2', '\x62', '\x63', '\x5', '\x4', '\x3', 
		'\x2', '\x63', '\x17', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\t', 
		'\x2', '\x2', '\x2', '\x65', '\x19', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'j', '\x5', '\x18', '\r', '\x2', 'g', 'j', '\x5', '\x1E', '\x10', '\x2', 
		'h', 'j', '\x5', '\x1C', '\xF', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\x1B', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\xF', 
		'\x1', '\x2', 'l', 'p', '\a', '\x1A', '\x2', '\x2', 'm', 'p', '\a', '\x15', 
		'\x2', '\x2', 'n', 'p', '\a', '\xE', '\x2', '\x2', 'o', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'v', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\f', '\x6', 
		'\x2', '\x2', 'r', 's', '\a', '\n', '\x2', '\x2', 's', 'u', '\x5', '\x1C', 
		'\xF', '\a', 't', 'q', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x1D', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\b', '\x10', '\x1', '\x2', 'z', '}', '\a', 
		'\x15', '\x2', '\x2', '{', '}', '\a', '\x1A', '\x2', '\x2', '|', 'y', 
		'\x3', '\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\f', '\x6', '\x2', '\x2', 
		'\x7F', '\x80', '\t', '\x3', '\x2', '\x2', '\x80', '\x85', '\x5', '\x1E', 
		'\x10', '\a', '\x81', '\x82', '\f', '\x5', '\x2', '\x2', '\x82', '\x83', 
		'\t', '\x4', '\x2', '\x2', '\x83', '\x85', '\x5', '\x1E', '\x10', '\x6', 
		'\x84', '~', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '#', '+', '.', '\x31', '\x33', ':', '=', '\x43', 
		'\x45', 'Y', 'i', 'o', 'v', '|', '\x84', '\x86',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
